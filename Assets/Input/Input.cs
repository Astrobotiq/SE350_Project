//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""MainMovement"",
            ""id"": ""8908864f-6423-486e-b75f-f6ddf83bb515"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""e1a8cdda-a801-4aec-b01b-41b3ede3e7e2"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HandRotation"",
                    ""type"": ""Value"",
                    ""id"": ""99faab00-3363-475c-a2f7-2c54846b97b2"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""781acde1-ae7a-4fbb-a5e7-10d6c0eff997"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Placement"",
                    ""type"": ""Button"",
                    ""id"": ""46d37161-4ddd-4aa6-8d28-80594f3e447c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateItem"",
                    ""type"": ""Button"",
                    ""id"": ""b990c80a-0478-4cad-8c81-96da4d99d41a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""5c23b7f7-0b72-472b-9bae-591fbd0d3b90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenUI"",
                    ""type"": ""Button"",
                    ""id"": ""c65df7c9-660b-4cc0-978c-efc120bc1906"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""f83356e5-d8d1-4af7-ad20-347318f19317"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""c218ef0b-568e-4128-b668-9912955400e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""9508fc07-b8ad-4d43-8ad1-609b766a5120"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""501b4f72-3c71-47e7-8c29-d3d554f9a0c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""2dcbc608-8dbf-4ca1-82e4-7a70cd0efc81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""23c64ecc-f8d0-41b7-a2a5-11bfbea7b666"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52e40315-3866-4222-a9fe-d43056fa0be5"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f413ce4b-9c45-44ea-8164-cf0b4b347cb1"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8fa0ab7-b9ac-4327-a208-9436b65bf3c5"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Placement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17773f09-57c3-4fb1-9844-006f62ed4761"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47b86085-b204-4e62-abc5-e4963bb91a58"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0f7da4c-279c-496b-bbe7-f1c89dabcff7"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4642438-f9d0-44a9-82e1-1cbb58daed6a"",
                    ""path"": ""<XInputController>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""968b8271-48ac-40b4-af18-16f1de130788"",
                    ""path"": ""<XInputController>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feaf71ab-f9d7-4b70-b1e5-c4c780734382"",
                    ""path"": ""<XInputController>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0395b324-3ad4-4507-8875-c7df551e15ca"",
                    ""path"": ""<XInputController>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86da7d8b-94a2-41cb-95fc-659bdf3f16b0"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainMovement
        m_MainMovement = asset.FindActionMap("MainMovement", throwIfNotFound: true);
        m_MainMovement_Walk = m_MainMovement.FindAction("Walk", throwIfNotFound: true);
        m_MainMovement_HandRotation = m_MainMovement.FindAction("HandRotation", throwIfNotFound: true);
        m_MainMovement_Shoot = m_MainMovement.FindAction("Shoot", throwIfNotFound: true);
        m_MainMovement_Placement = m_MainMovement.FindAction("Placement", throwIfNotFound: true);
        m_MainMovement_RotateItem = m_MainMovement.FindAction("RotateItem", throwIfNotFound: true);
        m_MainMovement_Switch = m_MainMovement.FindAction("Switch", throwIfNotFound: true);
        m_MainMovement_OpenUI = m_MainMovement.FindAction("OpenUI", throwIfNotFound: true);
        m_MainMovement_Up = m_MainMovement.FindAction("Up", throwIfNotFound: true);
        m_MainMovement_Down = m_MainMovement.FindAction("Down", throwIfNotFound: true);
        m_MainMovement_Left = m_MainMovement.FindAction("Left", throwIfNotFound: true);
        m_MainMovement_Right = m_MainMovement.FindAction("Right", throwIfNotFound: true);
        m_MainMovement_Interaction = m_MainMovement.FindAction("Interaction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMovement
    private readonly InputActionMap m_MainMovement;
    private List<IMainMovementActions> m_MainMovementActionsCallbackInterfaces = new List<IMainMovementActions>();
    private readonly InputAction m_MainMovement_Walk;
    private readonly InputAction m_MainMovement_HandRotation;
    private readonly InputAction m_MainMovement_Shoot;
    private readonly InputAction m_MainMovement_Placement;
    private readonly InputAction m_MainMovement_RotateItem;
    private readonly InputAction m_MainMovement_Switch;
    private readonly InputAction m_MainMovement_OpenUI;
    private readonly InputAction m_MainMovement_Up;
    private readonly InputAction m_MainMovement_Down;
    private readonly InputAction m_MainMovement_Left;
    private readonly InputAction m_MainMovement_Right;
    private readonly InputAction m_MainMovement_Interaction;
    public struct MainMovementActions
    {
        private @Input m_Wrapper;
        public MainMovementActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_MainMovement_Walk;
        public InputAction @HandRotation => m_Wrapper.m_MainMovement_HandRotation;
        public InputAction @Shoot => m_Wrapper.m_MainMovement_Shoot;
        public InputAction @Placement => m_Wrapper.m_MainMovement_Placement;
        public InputAction @RotateItem => m_Wrapper.m_MainMovement_RotateItem;
        public InputAction @Switch => m_Wrapper.m_MainMovement_Switch;
        public InputAction @OpenUI => m_Wrapper.m_MainMovement_OpenUI;
        public InputAction @Up => m_Wrapper.m_MainMovement_Up;
        public InputAction @Down => m_Wrapper.m_MainMovement_Down;
        public InputAction @Left => m_Wrapper.m_MainMovement_Left;
        public InputAction @Right => m_Wrapper.m_MainMovement_Right;
        public InputAction @Interaction => m_Wrapper.m_MainMovement_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_MainMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMovementActions set) { return set.Get(); }
        public void AddCallbacks(IMainMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMovementActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @HandRotation.started += instance.OnHandRotation;
            @HandRotation.performed += instance.OnHandRotation;
            @HandRotation.canceled += instance.OnHandRotation;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Placement.started += instance.OnPlacement;
            @Placement.performed += instance.OnPlacement;
            @Placement.canceled += instance.OnPlacement;
            @RotateItem.started += instance.OnRotateItem;
            @RotateItem.performed += instance.OnRotateItem;
            @RotateItem.canceled += instance.OnRotateItem;
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
            @OpenUI.started += instance.OnOpenUI;
            @OpenUI.performed += instance.OnOpenUI;
            @OpenUI.canceled += instance.OnOpenUI;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
        }

        private void UnregisterCallbacks(IMainMovementActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @HandRotation.started -= instance.OnHandRotation;
            @HandRotation.performed -= instance.OnHandRotation;
            @HandRotation.canceled -= instance.OnHandRotation;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Placement.started -= instance.OnPlacement;
            @Placement.performed -= instance.OnPlacement;
            @Placement.canceled -= instance.OnPlacement;
            @RotateItem.started -= instance.OnRotateItem;
            @RotateItem.performed -= instance.OnRotateItem;
            @RotateItem.canceled -= instance.OnRotateItem;
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
            @OpenUI.started -= instance.OnOpenUI;
            @OpenUI.performed -= instance.OnOpenUI;
            @OpenUI.canceled -= instance.OnOpenUI;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
        }

        public void RemoveCallbacks(IMainMovementActions instance)
        {
            if (m_Wrapper.m_MainMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMovementActions @MainMovement => new MainMovementActions(this);
    public interface IMainMovementActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnHandRotation(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnPlacement(InputAction.CallbackContext context);
        void OnRotateItem(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
        void OnOpenUI(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
}
